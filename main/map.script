local perlin = require('main.perlin_noise')
perlin:load()

local rgb = hash('rgb')
local luminance = hash('luminance')

local colors = {
	water = 255 * vmath.vector3(0.2, 0.5, 1),
	sand = 255 * vmath.vector3(0.8, 0.9, 0.6),
	grass = 255 * vmath.vector3(0.2, 0.8, 0.4),
	rock = 255 * vmath.vector3(0.7, 0.7, 0.7),
	snow = 255 * vmath.vector3(1, 1, 1)
}

local levels = {
	{elevation = 0.4, name = 'water'},
	{elevation = 0.6, name = 'sand'},
	{elevation = 0.7, name = 'grass'},
	{elevation = 1, name = 'rock'}
}

local function colortobyte(color)
	return 255 * color
end

local function set_pixel(stream, width, x, y, color)
	local index = 3 * (x + y * width) + 1
	stream[index] = color.x
	stream[index + 1] = color.y
	stream[index + 2] = color.z
end

local function set_luminance(stream, width, x, y, luminance)
	stream[(x + y * width) + 1] = 255 * luminance
end

local function generate_heightmap(self)
	self.heightmap = {}
	local scale = 1 / 100
	for x = 0, self.width - 1 do
		for y = 0, self.height - 1 do
			local elevation = 0.5 + (perlin:noise(x * scale, y * scale, self.noise_z) + 0.5 * perlin:noise(2 * x * scale, 2 * y * scale, self.noise_z) + 0.25 * perlin:noise(4 * x * scale, 4 * y * scale, self.noise_z)) / 2
			self.heightmap[x + y * self.width] = math.pow(elevation, 1.5)
		end
	end
end

local function get_value(map, width, height, x, y)
	if x < 0 then
		x = 0
	elseif x >= width then
		x = width - 1
	end
	if y < 0 then
		y = 0
	elseif y >= height then
		y = height - 1
	end
	return map[x + y * width]
end

local normal_scale = 100
local function get_normal(self, x, y)
	local h1 = get_value(self.heightmap, self.width, self.height, x + 1, y)
	local h2 = get_value(self.heightmap, self.width, self.height, x - 1, y)
	local v1 = get_value(self.heightmap, self.width, self.height, x, y + 1)
	local v2 = get_value(self.heightmap, self.width, self.height, x, y - 1)
	local dxy = vmath.vector3(normal_scale * (h1 - h2), normal_scale * (v1 - v2), 1)
	return 0.5 * vmath.normalize(dxy) + vmath.vector3(0.5, 0.5, 0.5)
end

local function set_textures(self)
	local heightmap_buffer = buffer.create(self.width * self.height, {{name = luminance, type = buffer.VALUE_TYPE_UINT8, count = 1}})
	local heightmap_stream = buffer.get_stream(heightmap_buffer, luminance)

	local normalmap_buffer = buffer.create(self.width * self.height, {{name = rgb, type = buffer.VALUE_TYPE_UINT8, count = 3}})
	local normalmap_stream = buffer.get_stream(normalmap_buffer, rgb)

	for x = 0, self.width - 1 do
		for y = 0, self.height - 1 do
			local elevation = self.heightmap[x + y * self.width]
			set_luminance(heightmap_stream, self.width, x, y, elevation)
			set_pixel(normalmap_stream, self.width, x, y, colortobyte(get_normal(self, x, y)))
		end
	end
	
	local resource_path = go.get(self.model, 'texture0')
	local header = {width = self.width, height = self.height, type = resource.TEXTURE_TYPE_2D, format = resource.TEXTURE_FORMAT_LUMINANCE, num_mip_maps = 1}
	resource.set_texture(resource_path, header, heightmap_buffer)

	local resource_path = go.get(self.model, 'texture1')
	local header = {width = self.width, height = self.height, type = resource.TEXTURE_TYPE_2D, format = resource.TEXTURE_FORMAT_RGB, num_mip_maps = 1}
	resource.set_texture(resource_path, header, normalmap_buffer)
end

local function set_climate_parameters(self)
	go.set(self.model, 'color_water', vmath.vector4(0.2, 0.5, 1, 1))
	go.set(self.model, 'color_sand', vmath.vector4(0.8, 0.9, 0.6, 1))
	go.set(self.model, 'color_grass', vmath.vector4(0.2, 0.8, 0.4, 1))
	go.set(self.model, 'color_rock', vmath.vector4(0.7, 0.4, 0.2, 1))

	go.set(self.model, 'base_coldness', vmath.vector4(-1, 0, 0, 0))
end

local function animate_climate(self)
	go.set(self.model, 'elevation_water', vmath.vector4(1, 0, 0, 0))
	go.set(self.model, 'elevation_sand', vmath.vector4(0, 0, 0, 0))
	go.set(self.model, 'elevation_grass', vmath.vector4(0, 0, 0, 0))
	go.set(self.model, 'elevation_rock', vmath.vector4(1, 0, 0, 0))

	go.animate(self.model, 'elevation_water.x', go.PLAYBACK_ONCE_FORWARD, 0.4, go.EASING_OUTQUAD, 10)
	go.animate(self.model, 'color_rock', go.PLAYBACK_ONCE_FORWARD, vmath.vector4(0.7, 0.7, 0.7, 0), go.EASING_OUTQUAD, 5, 5, function()
		go.animate(self.model, 'elevation_grass.x', go.PLAYBACK_ONCE_FORWARD, 0.6, go.EASING_OUTQUAD, 5)
		go.animate(self.model, 'elevation_sand.x', go.PLAYBACK_ONCE_FORWARD, 0.45, go.EASING_OUTQUAD, 4, 1, function()
			go.animate(self.model, 'elevation_water.x', go.PLAYBACK_ONCE_FORWARD, 0.3, go.EASING_LINEAR, 10)
			go.animate(self.model, 'base_coldness.x', go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, 10, 0, function()
				go.set(self.model, 'elevation_sand.x', 0)
				go.set(self.model, 'elevation_grass.x', 0.65)
				go.animate(self.model, 'base_coldness.x', go.PLAYBACK_ONCE_FORWARD, -1, go.EASING_LINEAR, 10)
				go.animate(self.model, 'elevation_grass.x', go.PLAYBACK_ONCE_FORWARD, 0.3, go.EASING_OUTQUAD, 10, 5)
				go.animate(self.model, 'elevation_water.x', go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 10, 5, function()
					go.animate(self.model, 'elevation_sand.x', go.PLAYBACK_ONCE_FORWARD, 0.3, go.EASING_OUTQUAD, 8)
					go.animate(self.model, 'color_sand', go.PLAYBACK_ONCE_FORWARD, vmath.vector4(0.9, 0.8, 0.5, 0), go.EASING_OUTQUAD, 5, 3)
					go.animate(self.model, 'color_rock', go.PLAYBACK_ONCE_FORWARD, vmath.vector4(0.7, 0.5, 0.3, 0), go.EASING_OUTQUAD, 5, 3)
				end)
			end)
		end)
	end)
end

function update(self, dt)
	self.light_angle = self.light_angle + 0.005
	if self.light_angle > 2 * math.pi then
		self.light_angle = 0
	end
	go.set(self.model, 'light_position', vmath.vector4(math.cos(self.light_angle), math.sin(self.light_angle), math.sin(self.light_angle) + 0.5, 0))
end

function init(self)
	self.width = 1024
	self.height = 1024
	go.set_scale(vmath.vector3(self.width, self.height, 1))
	self.model = msg.url('#model')

	self.light_angle = 0

	self.noise_z = 0
	generate_heightmap(self)
	set_textures(self)
	set_climate_parameters(self)

	animate_climate(self)
end