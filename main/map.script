local perlin = require('main.perlin_noise')
perlin:load()

local rgb = hash('rgb')

local colors = {
	water = 255 * vmath.vector3(0.2, 0.5, 1),
	sand = 255 * vmath.vector3(0.8, 0.9, 0.6),
	grass = 255 * vmath.vector3(0.2, 0.8, 0.4),
	rock = 255 * vmath.vector3(0.7, 0.7, 0.7)
}

local function set_pixel(stream, width, x, y, color)
	local index = 3 * (x + y * width) + 1
	stream[index] = color.x
	stream[index + 1] = color.y
	stream[index + 2] = color.z
end

function generate_terrain(self)
	self.buffer = buffer.create(self.width * self.height, {{name = rgb, type = buffer.VALUE_TYPE_UINT8, count = 3}})
	local stream = buffer.get_stream(self.buffer, rgb)

	local scale = 1 / 50
	for x = 0, self.width - 1 do
		for y = 0, self.height - 1 do
			local v = 0.5 + perlin:noise(x * scale, y * scale, 0) / 2
			local color = colors.rock
			if v < 0.55 then
				color = colors.water
			elseif v < 0.7 then
				color = colors.sand
			elseif v < 0.8 then
				color = colors.grass
			end
			set_pixel(stream, self.width, x, y, color)
		end
	end

	local resource_path = go.get(self.model, 'texture0')
	local header = {width = self.width, height = self.height, type = resource.TEXTURE_TYPE_2D, format = resource.TEXTURE_FORMAT_RGB, num_mip_maps = 1}
	resource.set_texture(resource_path, header, self.buffer)
end

function init(self)
	self.width = 1024
	self.height = 1024
	go.set_scale(vmath.vector3(self.width, self.height, 1))
	self.model = msg.url('#model')	

	generate_terrain(self)
end